syntax on

" Vim Plug
call plug#begin('~/.vim/plugged')

Plug 'gruvbox-community/gruvbox'
Plug 'sheerun/vim-polyglot'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'francoiscabrol/ranger.vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'

call plug#end()
" Vim Plug

" The best colorscheme
colorscheme gruvbox

" Relative line numbering
set number relativenumber

" Scrolling preferences
set mouse=a
set scrolloff=8

" Highlight current line when inserting
autocmd InsertEnter,InsertLeave * set cul!

set list
set listchars=trail:Â·,tab:>-
hi SpecialKey ctermfg=59 guifg=#5f5f5f

" Statusline customization
set laststatus=2
set statusline=
set statusline+=\ %f
set statusline+=%=
set statusline+=\ %p%%
set statusline+=\ %l:%c
set statusline+=\ %y

" Exploring File Tree
map <C-E> :Ranger<CR>
let g:ranger_map_keys = 0
let g:ranger_replace_netrw = 1

" Searching For Files
nnoremap <silent> <C-p> :Files<CR>
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8 } }
let g:fzf_preview_window = 'right:62%'
let $FZF_DEFAULT_OPTS='--reverse'

" Searching In Files
nnoremap <silent> <C-f> :Rg<CR>
command! -bang -nargs=* Rg call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>), 1, {'options': '--delimiter : --nth 4..'}, <bang>0)
set grepprg=rg\ --vimgrep\ --smart-case\ --follow

" Cache and buffer stuff I don't fully understand
set hidden
set noswapfile
set nobackup
set nowritebackup
set updatetime=50

" Search preferences
set incsearch
set nohlsearch

" Turn off annoying error bells
set noerrorbells
set belloff=all

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show signcolumn with transparent background
set signcolumn=yes
highlight clear SignColumn
highlight GitGutterAdd ctermfg=green
highlight GitGutterChange ctermfg=yellow
highlight GitGutterDelete ctermfg=red
highlight GitGutterChangeDelete ctermfg=brown

" Go Settings
autocmd FileType go setlocal noexpandtab tabstop=8
let g:go_doc_popup_window = 1
let g:go_def_mapping_enabled = 0
let g:go_code_completion_ennabled = 0

" Default Coc stuff
command! -nargs=0 Format :call CocAction('format')

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Show Coc Docs
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Use tab for coc completion
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

